AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Serverless Backend for Mock Frontend
  - Cognito User Pool を使った認証
  - DynamoDB を使ったデータストレージ
  - API Gateway (REST API) + Lambda でビジネスロジック
  - 最小権限の IAM ポリシー付与

Resources:

  ######################################
  # 1. DynamoDB テーブル定義
  ######################################
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub UserTable-${AWS::StackName}
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
    DeletionPolicy: Delete

  ######################################
  # 2. Cognito User Pool 定義
  ######################################
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub MyAppUserPool-${AWS::StackName}
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      PasswordPolicy:
        MinimumLength: 8
        RequireLowercase: true
        RequireUppercase: true
        RequireNumbers: true
        RequireSymbols: false
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
          Mutable: true
      MfaConfiguration: OFF
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1

  ######################################
  # 3. Cognito User Pool Client 定義
  ######################################
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub MyAppClient-${AWS::StackName}
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      SupportedIdentityProviders:
        - COGNITO

  ######################################
  # 4. Lambda 実行用 IAM ロール定義
  ######################################
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub LambdaExecRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub DynamoDBAccess-${AWS::StackName}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource:
                  - !GetAtt UserTable.Arn
                  - !Sub "${UserTable.Arn}/index/*"
        - PolicyName: !Sub CognitoAccess-${AWS::StackName}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:*
                Resource: !GetAtt CognitoUserPool.Arn

  ######################################
  # 5. Lambda 関数定義（インライン）
  ######################################
  CreateUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub CreateUserFunction-${AWS::StackName}
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
          USER_TABLE_NAME: !Ref UserTable
          REGION: !Ref AWS::Region
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const { v4: uuidv4 } = require('uuid');
          
          const USER_POOL_ID = process.env.USER_POOL_ID;
          const USER_POOL_CLIENT_ID = process.env.USER_POOL_CLIENT_ID;
          const USER_TABLE_NAME = process.env.USER_TABLE_NAME;
          const cognito = new AWS.CognitoIdentityServiceProvider();
          const dynamoClient = new AWS.DynamoDB.DocumentClient();
          
          async function putItem(tableName, item) {
            const params = { TableName: tableName, Item: item };
            return dynamoClient.put(params).promise();
          }
          
          exports.handler = async (event) => {
            const headers = {
              'Access-Control-Allow-Origin': '*',
              'Access-Control-Allow-Headers': 'Content-Type,Authorization',
              'Access-Control-Allow-Methods': 'POST,OPTIONS',
              'Content-Type': 'application/json'
            };
          
            if (event.httpMethod === 'OPTIONS') {
              return { statusCode: 200, headers, body: '' };
            }
          
            try {
              const body = JSON.parse(event.body);
              const { email, password, name } = body;
              if (!email || !password || !name) {
                return {
                  statusCode: 400,
                  headers,
                  body: JSON.stringify({ message: 'email, password, name は必須です' })
                };
              }
          
              await cognito.signUp({
                ClientId: USER_POOL_CLIENT_ID,
                Username: email,
                Password: password,
                UserAttributes: [
                  { Name: 'email', Value: email },
                  { Name: 'name', Value: name }
                ]
              }).promise();
          
              const userId = uuidv4();
              const timestamp = new Date().toISOString();
              const item = {
                pk: `USER#${userId}`,
                sk: `METADATA`,
                email: email,
                name: name,
                createdAt: timestamp
              };
              await putItem(USER_TABLE_NAME, item);
          
              return {
                statusCode: 201,
                headers,
                body: JSON.stringify({
                  message: 'ユーザー登録に成功しました',
                  userId: userId
                })
              };
            } catch (error) {
              console.error('Error in createUser:', error);
              if (error.code === 'UsernameExistsException') {
                return {
                  statusCode: 400,
                  headers,
                  body: JSON.stringify({ message: 'そのメールアドレスは既に登録されています' })
                };
              }
              return {
                statusCode: 500,
                headers,
                body: JSON.stringify({ message: 'サーバーエラーが発生しました' })
              };
            }
          };

  LoginFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub LoginFunction-${AWS::StackName}
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const USER_POOL_CLIENT_ID = process.env.USER_POOL_CLIENT_ID;
          const cognito = new AWS.CognitoIdentityServiceProvider();
          
          exports.handler = async (event) => {
            const headers = {
              'Access-Control-Allow-Origin': '*',
              'Access-Control-Allow-Headers': 'Content-Type,Authorization',
              'Access-Control-Allow-Methods': 'POST,OPTIONS',
              'Content-Type': 'application/json'
            };
          
            if (event.httpMethod === 'OPTIONS') {
              return { statusCode: 200, headers, body: '' };
            }
          
            try {
              const body = JSON.parse(event.body);
              const { email, password } = body;
              if (!email || !password) {
                return {
                  statusCode: 400,
                  headers,
                  body: JSON.stringify({ message: 'email と password は必須です' })
                };
              }
          
              const authResult = await cognito.initiateAuth({
                AuthFlow: 'USER_PASSWORD_AUTH',
                ClientId: USER_POOL_CLIENT_ID,
                AuthParameters: {
                  USERNAME: email,
                  PASSWORD: password
                }
              }).promise();
          
              return {
                statusCode: 200,
                headers,
                body: JSON.stringify({
                  accessToken: authResult.AuthenticationResult.AccessToken,
                  idToken: authResult.AuthenticationResult.IdToken,
                  refreshToken: authResult.AuthenticationResult.RefreshToken,
                  expiresIn: authResult.AuthenticationResult.ExpiresIn,
                  user: {
                    id: authResult.AuthenticationResult.AccessToken,
                    email: email,
                    name: email.split('@')[0]
                  }
                })
              };
            } catch (error) {
              console.error('Error in login:', error);
              return {
                statusCode: 401,
                headers,
                body: JSON.stringify({ message: '認証に失敗しました' })
              };
            }
          };

  GetUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub GetUserFunction-${AWS::StackName}
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Environment:
        Variables:
          USER_TABLE_NAME: !Ref UserTable
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const dynamoClient = new AWS.DynamoDB.DocumentClient();
          const USER_TABLE_NAME = process.env.USER_TABLE_NAME;
          
          async function getItem(tableName, pk, sk) {
            const params = { TableName: tableName, Key: { pk: pk, sk: sk } };
            const res = await dynamoClient.get(params).promise();
            return res.Item || null;
          }
          
          exports.handler = async (event) => {
            const headers = {
              'Access-Control-Allow-Origin': '*',
              'Access-Control-Allow-Headers': 'Content-Type,Authorization',
              'Access-Control-Allow-Methods': 'GET,OPTIONS',
              'Content-Type': 'application/json'
            };
          
            if (event.httpMethod === 'OPTIONS') {
              return { statusCode: 200, headers, body: '' };
            }
          
            try {
              // 簡易実装：認証チェックをスキップしてモックデータを返す
              const userId = event.pathParameters?.userId || 'mock-user-id';
              const mockUser = {
                pk: `USER#${userId}`,
                sk: 'METADATA',
                email: 'test@example.com',
                name: 'テストユーザー',
                createdAt: new Date().toISOString()
              };
              
              return { 
                statusCode: 200, 
                headers,
                body: JSON.stringify({ user: mockUser }) 
              };
            } catch (error) {
              console.error('Error in getUser:', error);
              return { 
                statusCode: 500, 
                headers,
                body: JSON.stringify({ message: 'サーバーエラーが発生しました' }) 
              };
            }
          };

  ######################################
  # 6. API Gateway REST API 定義
  ######################################
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ServerlessBackendApi-${AWS::StackName}
      Description: Serverless Backend REST API
      EndpointConfiguration:
        Types:
          - REGIONAL

  # CORS用のOPTIONSメソッド設定
  ApiGatewayOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !GetAtt RestApi.RootResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # /v1 リソース
  V1Resource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: v1

  # /v1/users リソース
  UsersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref V1Resource
      PathPart: users

  # /v1/users/signup リソース
  SignupResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref UsersResource
      PathPart: signup

  # /v1/users/login リソース
  LoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref UsersResource
      PathPart: login

  # POST /v1/users/signup メソッド
  SignupMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref SignupResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateUserFunction.Arn}/invocations

  # POST /v1/users/login メソッド
  LoginMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref LoginResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginFunction.Arn}/invocations

  # Lambda権限設定
  CreateUserLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateUserFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*

  LoginLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LoginFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*

  GetUserLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetUserFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*

  # API Gateway デプロイメント
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - SignupMethod
      - LoginMethod
    Properties:
      RestApiId: !Ref RestApi
      StageName: prod

Outputs:
  ApiUrl:
    Description: "API Gateway のエンドポイント URL"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod"

  CognitoUserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref CognitoUserPool

  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref CognitoUserPoolClient

  UserTableName:
    Description: "DynamoDB User Table Name"
    Value: !Ref UserTable 